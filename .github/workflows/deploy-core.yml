name: Deploy Core Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - "infra/core/**"
      - ".github/workflows/deploy-core.yml"
  pull_request:
    branches:
      - main
    paths:
      - "infra/core/**"
      - ".github/workflows/deploy-core.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: "Terraform Plan & Apply"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: infra/core

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Set Terraform AzureRM provider environment variables
      # These tell Terraform to use OIDC authentication instead of Azure CLI
      - name: Set Terraform Environment Variables
        run: |
          echo "Setting Terraform AzureRM environment variables..."
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_USE_CLI=false" >> $GITHUB_ENV

      - name: Verify Terraform Authentication Setup
        run: |
          echo "=== Terraform Authentication Environment ==="
          echo "ARM_USE_OIDC: ${ARM_USE_OIDC:-not set}"
          echo "ARM_USE_CLI: ${ARM_USE_CLI:-not set}"
          echo "ARM_CLIENT_ID: ${ARM_CLIENT_ID:+***set***}"
          echo "ARM_TENANT_ID: ${ARM_TENANT_ID:+***set***}"
          echo "ARM_SUBSCRIPTION_ID: ${ARM_SUBSCRIPTION_ID:+***set***}"
          echo "============================================"

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backends/backend-dev.hcl

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=vars/dev.tfvars -no-color -out=tfplan
        continue-on-error: true

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan

      - name: Terraform Output
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: output
        run: terraform output -json

      - name: Comment PR with Apply Result
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Apply ‚úÖ

            Infrastructure has been successfully deployed to **dev** environment.

            *Deployed by: @${{ github.actor }}*`;

            // This will comment on the latest commit
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: output
            })
